{"version":3,"sources":["components/AppHeader.tsx","data/index.ts","components/InputForm.tsx","services/ApiService.ts","App.tsx","Theme.ts","index.tsx"],"names":["useStyles","makeStyles","theme","title","flexGrow","AppHeader","classes","AppBar","position","color","Toolbar","variant","Typography","className","sentenceTypes","label","value","tenses","formLabels","help","InputForm","formData","onSubmit","React","useState","subject","setSubject","type","setType","tense","setTense","noun","verb","setVerb","object","setObject","e","preventDefault","id","Date","now","Grid","container","spacing","item","xs","TextField","helperText","onChange","target","fullWidth","select","map","t","MenuItem","sm","md","Autocomplete","freeSolo","onInputChange","val","options","nounsData","nouns","getOptionLabel","option","renderInput","params","verbsData","verbs","v","present","sort","defaultValue","required","Button","cache","Map","ApiService","url","opts","key","JSON","stringify","has","get","fetch","response","json","set","apiHeaders","Headers","append","searchParams","URLSearchParams","toString","request","headers","SentenceList","props","List","items","a","b","parseInt","ListItem","button","divider","onClick","sentence","synth","window","speechSynthesis","speech","SpeechSynthesisUtterance","speak","err","console","error","saySentence","ListItemText","primary","primaryTypographyProps","App","setItems","handleSubmit","data","getSentence","concat","Box","Container","my","mt","darkTheme","createMuiTheme","palette","main","colors","yellow","AppRoot","ThemeProvider","CssBaseline","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ca1bab9.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  AppBar,\n  Box,\n  makeStyles,\n  Toolbar,\n  Typography\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 1\n  }\n}));\n\nexport const AppHeader = () => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"sticky\" color=\"inherit\">\n      <Toolbar variant=\"dense\">\n        <Typography variant=\"h6\" className={classes.title}>\n        🇺🇸\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import verbsData from \"./verbs.json\";\nimport nounsData from \"./nouns.json\";\n\nexport const title = 'Form Proper Sentence';\nexport const body = 'Use the form below to construct a proper sentence.'\n\nexport function getNouns() {\n  const { nouns } = nounsData;\n  return nouns;\n}\n\nexport function getVerbs() {\n  const { verbs } = verbsData;\n  return verbs.map((v) => v.present);\n}\n\nexport function getObjects() {\n  return [\"Building\", \"TV\", \"Computer\", \"Fish\", \"Diamond\", \"Bathtub\", \"Sink\", \"Carrots\"].sort();\n}\n\nexport const sentenceTypes = [\n  { label: \"Yes / No\", value: \"yesno\" },\n  { label: \"What object?\", value: \"whatobj\" },\n  { label: \"Who subject?\", value: \"whosubj\" },\n];\n\nexport const tenses = [\n  { label: \"Past\", value: \"past\" },\n  { label: \"Present\", value: \"present\" },\n  { label: \"Future\", value: \"future\" },\n];\n\nexport const formLabels = {\n  type: {\n    label: \"Type of sentence\",\n    help: \"The type of sentence structure\",\n  },\n  noun: {\n    label: \"Give a subject\",\n    help: \"A noun. (👶🏻, 👮🏽‍♀️, 👩, 🏖)\",\n  },\n  verb: {\n    label: \"Give an action\",\n    help: \"A verb. (🏊🏼‍♂️, 🚣🏽, 🚴🏽‍♀️, 🚀)\",\n  },\n  tense: {\n    label: \"Give a tense\",\n    help: \"A time. (⏱, 🕰) \",\n  },\n  object: {\n    label: \"Give a object\",\n    help: \"A noun. (🧸, 📺, 🧰, 🛏)\",\n  },\n  submit: {\n    label: 'Create'\n  }\n};","import React from \"react\";\nimport {\n  Box,\n  Button,\n  Grid,\n  Menu,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\n\nimport {\n  formLabels,\n  getNouns,\n  getObjects,\n  getVerbs,\n  sentenceTypes,\n  tenses,\n} from \"../data\";\n\nexport interface InputData {\n  id: string;\n  subject?: string;\n  type?: string;\n  verb?: string;\n  noun?: string;\n  object?: string;\n  sentence?: string;\n  tense?: string;\n}\n\nexport interface InputFormProps {\n  onSubmit?: (data: InputData) => void;\n}\n\nexport const InputForm: React.FC<InputFormProps> = ({ onSubmit }) => {\n  const [subject, setSubject] = React.useState(\"\");\n  const [type, setType] = React.useState(\"yesno\");\n  const [tense, setTense] = React.useState(\"\");\n  const [noun, setNoun] = React.useState(\"\");\n  const [verb, setVerb] = React.useState(\"\");\n  const [object, setObject] = React.useState(\"\");\n\n  let formData: InputData;\n\n  const smSize = 6;\n  const mdSize = 3;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    formData = {\n      id: `${Date.now()}`,\n      verb,\n      type,\n      tense,\n      object,\n      subject,\n    };\n    if (onSubmit) {\n      onSubmit(formData);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container spacing={4}>\n        {/* Sentence Type */}\n        <Grid item xs={12}>\n          <TextField\n            id=\"type\"\n            label={formLabels.type.label}\n            helperText={formLabels.type.help}\n            value={type}\n            onChange={(e) => setType(e.target.value)}\n            variant=\"outlined\"\n            fullWidth\n            select\n          >\n            {sentenceTypes.map((t) => (\n              <MenuItem key={t.value} value={t.value}>\n                {t.label}\n              </MenuItem>\n            ))}\n          </TextField>\n        </Grid>\n\n        {/* Sentence Subject / Noun */}\n        <Grid item sm={smSize} md={mdSize} xs={12}>\n          <Autocomplete\n            id=\"noun\"\n            freeSolo\n            value={noun}\n            onInputChange={(e, val) => setSubject(val)}\n            options={getNouns()}\n            getOptionLabel={(option) => option}\n            fullWidth\n            renderInput={(params) => (\n              <TextField\n                label={formLabels.noun.label}\n                helperText={formLabels.noun.help}\n                variant=\"outlined\"\n                {...params}\n              />\n            )}\n          />\n        </Grid>\n        {/* Sentence Verb */}\n        <Grid item sm={smSize} md={mdSize} xs={12}>\n          <Autocomplete\n            id=\"verb\"\n            freeSolo\n            value={verb}\n            options={getVerbs()}\n            getOptionLabel={(option) => option}\n            onInputChange={(e, val) => setVerb(val)}\n            fullWidth\n            renderInput={(params) => (\n              <TextField\n                label={formLabels.verb.label}\n                helperText={formLabels.verb.help}\n                variant=\"outlined\"\n                {...params}\n              />\n            )}\n          />\n        </Grid>\n\n        {/* Sentence Object */}\n        <Grid item sm={smSize} md={mdSize} xs={12}>\n          <Autocomplete\n            id=\"object\"\n            freeSolo\n            value={object}\n            options={getObjects()}\n            getOptionLabel={(option) => option}\n            onInputChange={(e, val) => setObject(val)}\n            fullWidth\n            renderInput={(params) => (\n              <TextField\n                label={formLabels.object.label}\n                helperText={formLabels.object.help}\n                variant=\"outlined\"\n                {...params}\n              />\n            )}\n          />\n        </Grid>\n        {/* Sentence Tense */}\n        <Grid item sm={smSize} md={mdSize} xs={12}>\n          <TextField\n            id=\"tense\"\n            value={tense}\n            defaultValue=\"past\"\n            onChange={(e) => setTense(e.target.value)}\n            label={formLabels.tense.label}\n            helperText={formLabels.tense.help}\n            select\n            fullWidth\n            required\n            variant=\"outlined\"\n          >\n            {tenses.map((t) => (\n              <MenuItem key={t.value} value={t.value}>\n                {t.label}\n              </MenuItem>\n            ))}\n          </TextField>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Button variant=\"outlined\" type=\"submit\">\n            {formLabels.submit.label}\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\n","// TODO - These generally should be environment variables\nconst API_URL =\n  \"https://linguatools-sentence-generating.p.rapidapi.com/realise\";\n\nconst API_KEY = \"PUBWWqyBE7L60sVBPAq-dpe0TlC5I0Ab\";\nconst API_HOST = \"linguatools-sentence-generating.p.rapidapi.com\";\n\nconst cache = new Map();\n\nexport class ApiService {\n  static getCache() {\n    return cache;\n  }\n  /**\n   * Handle making a request to the api service and caching the result.\n   */\n  static async request(url, opts) {\n    const key = JSON.stringify(url);\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    const response = await fetch(url, opts);\n    const json = await response.json();\n    cache.set(key, json);\n    return json;\n  }\n\n  /**\n   * Handle making a request to generate a new sentence\n   */\n  static async getSentence({ subject, verb, object, tense, type }) {\n    const apiHeaders = new Headers();\n    apiHeaders.append(\"x-rapidapi-key\", API_KEY);\n    apiHeaders.append(\"x-rapidapi-host\", API_HOST);\n    const searchParams = new URLSearchParams([\n      [\"subject\", subject],\n      [\"sentencetype\", type],\n      [\"verb\", verb],\n      [\"tense\", tense],\n      [\"object\", object]\n    ]);\n    const url = `${API_URL}?${searchParams.toString()}`;\n    return ApiService.request(url, { headers: apiHeaders });\n  }\n}\n","import React from \"react\";\nimport {\n  Box,\n  Container,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport { AppHeader, InputData, InputForm } from \"./components\";\nimport { ApiService } from \"./services\";\nimport { title, body } from \"./data\";\n\nfunction SentenceList(props) {\n  const saySentence = (item) => {\n    const { sentence } = item;\n    try {\n      const synth = window.speechSynthesis;\n      const speech = new SpeechSynthesisUtterance(sentence);\n      synth.speak(speech);\n    } catch (err) {\n      console.error(\"saySentence\", err);\n    }\n  };\n\n  return (\n    <List>\n      {props.items &&\n        props.items\n          .sort((a, b) => parseInt(b.id) - parseInt(a.id))\n          .map((item) => (\n            <ListItem\n              button\n              key={item.id}\n              divider\n              onClick={() => {\n                saySentence(item);\n              }}\n            >\n              <ListItemText\n                primary={item.sentence}\n                primaryTypographyProps={{\n                  variant: \"h5\",\n                }}\n              />\n            </ListItem>\n          ))}\n    </List>\n  );\n}\n\n/**\n * App Component handles rendering the InputForm and handling add item to\n * list of sentences to be created.\n * @returns\n */\nexport const App = () => {\n  const [items, setItems] = React.useState<InputData[]>([]);\n\n  const handleSubmit = async (data) => {\n    const { sentence } = await ApiService.getSentence(data);\n    const item = { ...data, sentence };\n    setItems(items.concat(item));\n  };\n\n\n  return (\n    <Box>\n      <AppHeader />\n      <Container>\n        <Box my={4}>\n          <Typography variant=\"h4\">{title}</Typography>\n          <p>{body}</p>\n        </Box>\n        <InputForm onSubmit={handleSubmit} />\n        <Box mt={4}>\n          <SentenceList items={items}/>\n        </Box>\n      </Container>\n    </Box>\n  );\n};\n","import { colors, createMuiTheme } from \"@material-ui/core\";\n\nexport const darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: colors.yellow[400]\n    }\n  }\n});\n","import { ThemeProvider, CssBaseline } from \"@material-ui/core\";\nimport { render } from \"react-dom\";\n\nimport { App } from \"./App\";\nimport { darkTheme } from \"./Theme\";\n\nfunction AppRoot() {\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  );\n}\n\nrender(<AppRoot />, document.getElementById(\"root\"));\n"],"sourceRoot":""}